(* Lexical Grammar *)
ALPHA           = "A" | "B" | "C" | "D" | "E" | "F" | "G"
                | "H" | "I" | "J" | "K" | "L" | "M" | "N"
                | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
                | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
                | "c" | "d" | "e" | "f" | "g" | "h" | "i"
                | "j" | "k" | "l" | "m" | "n" | "o" | "p"
                | "q" | "r" | "s" | "t" | "u" | "v" | "w"
                | "x" | "y" | "z" | "_" ;
DIGIT           = "0" | "1" | "2" | "3" | "4" | "5" | "6"
                | "7" | "8" | "9" ;
SYMBOL          = "[" | "]" | "{" | "}" | "(" | ")" | "<"
                | ">" | "'" | "=" | "|" | "." | "," | ";"
                | "-" | "+" | "*" | "?";
WHITESPACE      = " " | "\n" | "\t" | "\r" | "\f" | "\b";
CHARACTER       = ALPHA | DIGIT | SYMBOL | WHITESPACE;
NUMBER          = DIGIT+ ( "." DIGIT+ )?;
STRING          = '"' ( CHARACTER )* '"';
IDENTIFIER      = ALPHA ( ALPHA | DIGIT )*;

(* Utility defintions *)
parameters     = IDENTIFIER ( "," IDENTIFIER )*;
function       = IDENTIFIER "(" parameters? ")" block;
arguments      = expression ( "," expression )*;

(* Declarations *)
declaration     = classDecl
                | funDecl
                | varDecl
                | statement;

classDecl       = "class" IDENTIFIER ( "<" IDENTIFIER )? "{" function* "}";
funDecl         = "fun" function ;
varDecl         = "var" IDENTIFIER ( "=" expression )? ";";

(* Syntax Grammar *)
program         = declaration* EOF;


(* Statements *)
statement       = exprStmt
                | forStmt
                | ifStmt
                | printStmt
                | returnStmt
                | whileStmt
                | block;

exprStmt        = expression ";";
forStmt         = "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement;
ifStmt          = "if" "(" expression ")" statement ( "else" statement )?;
printStmt       = "print" expression ";";
returnStmt      = "return" expression? ";";
whileStmt       = "while" "(" expression ")" statement;
block           = "{" declaration* "}";

(* Expressions *)
expression      = assignment;

assignment      = ( call "." )? IDENTIFIER "=" assignment | logic_or;

logic_or        = logic_and ( "or" logic_and )*;
logic_and       = equality ( "and" equality )*;
equality        = comparison ( ( "!=" | "==" ) comparison )*;
comparison      = term ( ( ">" | ">=" | "<" | "<=" ) term )*;
term            = factor ( ( "-" | "+" ) factor )*;
factor          = unary ( ( "/" | "*" ) unary )*;

unary           = ( "!" | "-" ) unary | call;
call            = primary ( "(" arguments? ")" | "." IDENTIFIER )*;
primary         = "true" | "false" | "nil" | "this" | NUMBER | STRING | IDENTIFIER | "(" expression ")" | "super" "." IDENTIFIER;
